<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>IronMoon</title>
        <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
        <link>http://localhost:4000/</link>
        <description></description>
        <pubDate>Mon, 21 May 2018 00:16:31 +1000</pubDate>
        
        <item>
            <title>File Tarpits: Potential Linux Filesystem Tricks to Frustrate Attackers</title>
            <link>/2018/05/20/File-Tarpits.html</link>
            <guid isPermaLink="true">/2018/05/20/File-Tarpits.html</guid>
            <description>&lt;p&gt;In the &lt;a href=&quot;/2018/05/19/File-Based-Honeypots-with-Auditd.html&quot;&gt;previous post&lt;/a&gt; we lernt about the power of file honeypots to detect malicious activity. But in this world of automation the time it takes for you to respond may be so long that its unlikely you can respond in time. In this post we will discuss some potential tactics to make your linux systems frustating to attackers who already have access and slow them down using some linux filesystem tricks.&lt;/p&gt;

&lt;h1 id=&quot;fitting-24gb-of-data-onto-a-10gb-filesystem-with-hardlinks&quot;&gt;Fitting 24GB of data onto a 10GB filesystem with Hardlinks&lt;/h1&gt;

&lt;p&gt;Hardlinks permit you to copy files without consuming disk space, this can be useful for all kind of resons, but in this case we want to slow down attackers attempts to exfiltrate data. We can do this by creating fake data and artifically inflating the space on the disk that an attacker would want to exfiltrate, giving us a better change of responding in time.&lt;/p&gt;

&lt;p&gt;First we will create a filesystem to do testing in because we don’t want to corrupt our root file system&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /mnt
dd if=/dev/zero of=ext4.img bs=1M count=10000
mkfs.ext4 ext4.img
mkdir tarpit
mount ext4.img tarpit
cd tarpit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can create some dummy files and try to copy it with hardlinks&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dd if=/dev/urandom of=sql1_backup.gzip bs=4650MB count=1 iflag=fullblock
dd if=/dev/urandom of=sql1_backuplogs.gzip bs=1650MB count=1 iflag=fullblock
cp -l sql1_backup.gzip sql2_backup.gzip
cp -l sql1_backuplogs.gzip sql2_backuplogs.gzip
cp -l sql1_backup.gzip sql3_backup.gzip
cp -l sql1_backuplogs.gzip sql3_backuplogs.gzip

mkdir personal
cp -l sql1_backup.gzip personal/dropbox_backup2018.gzip
cp -l sql1_backuplogs.gzip personal/dropbox_backup2017.gzip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s check out how much space we are now consuming&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ironmoon /mnt/tarpit # tree -h
.
├── [ 16K]  lost+found
├── [4.0K]  personal
│   ├── [1.5G]  dropbox_backup2017.gzip
│   └── [4.3G]  dropbox_backup2018.gzip
├── [4.3G]  sql1_backup.gzip
├── [1.5G]  sql1_backuplogs.gzip
├── [4.3G]  sql2_backup.gzip
├── [1.5G]  sql2_backuplogs.gzip
├── [4.3G]  sql3_backup.gzip
└── [1.5G]  sql3_backuplogs.gzip

root@ironmoon /mnt/tarpit # du -ah 
4.4G	./sql2_backup.gzip
16K	./lost+found
1.6G	./sql3_backuplogs.gzip
4.0K	./personal
5.9G	.
root@ironmoon /mnt/tarpit # du -ahl
4.4G	./sql2_backup.gzip
16K	./lost+found
4.4G	./sql1_backup.gzip
1.6G	./sql3_backuplogs.gzip
1.6G	./personal/dropbox_backup2017.gzip
4.4G	./personal/dropbox_backup2018.gzip
5.9G	./personal
4.4G	./sql3_backup.gzip
1.6G	./sql2_backuplogs.gzip
1.6G	./sql1_backuplogs.gzip
24G	.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The du command has only listed and counted the files once, only when we tell it to include hardlinks does it count it like we want it to! Applications like du know about hardlinks and check for them. However, we can fool du into not throughly checking for hardlinks by modifying the inode link count on the files. This link count is incremented every time a file is linked to an inode, and decreased every time a file linked to an inode is deleted. Setting this field to 1 can hide the fact that there are other files sharing this inode. We can’t do this normally, but we can do this by using filesystem debugging tools.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ironmoon /mnt/tarpit # debugfs -wR 'mi sql1_backup.gzip' ../ext4.img
debugfs 1.44.2 (14-May-2018)
                      Mode    [0100644] 
                   User ID    [0] 
                  Group ID    [0] 
                      Size    [1650000000] 
             Creation time    [1526812651] 
         Modification time    [1526812650] 
               Access time    [1526812643] 
             Deletion time    [0] 
                Link count    [2] 1
          Block count high    [0] 
               Block count    [3222672] 
                File flags    [0x80000] 
                Generation    [0x2a1a1192] 
                  File acl    [0] 
       High 32bits of size    [0] 
          Fragment address    [0] 
           Direct Block #0    [127754] 
           Direct Block #1    [65540] 
           Direct Block #2    [0] 
           Direct Block #3    [0] 
           Direct Block #4    [33795] 
           Direct Block #5    [0] 
           Direct Block #6    [32768] 
           Direct Block #7    [30720] 
           Direct Block #8    [67584] 
           Direct Block #9    [63488] 
          Direct Block #10    [32768] 
          Direct Block #11    [100352] 
            Indirect Block    [96256] 
     Double Indirect Block    [30720] 
     Triple Indirect Block    [133120] 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We need to remount the filesystem before this change will take effect.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ironmoon /mnt # cd .. &amp;amp;&amp;amp; umount tarpit &amp;amp;&amp;amp; mount ext4.img tarpit &amp;amp;&amp;amp; cd tarpit
root@ironmoon /mnt # du -ah 
4.4G	./tarpit/sql2_backup.gzip
16K	./tarpit/lost+found
4.4G	./tarpit/sql1_backup.gzip
1.6G	./tarpit/sql3_backuplogs.gzip
1.6G	./tarpit/personal/dropbox_backup2017.gzip
4.4G	./tarpit/personal/dropbox_backup2018.gzip
5.9G	./tarpit/personal
4.4G	./tarpit/sql3_backup.gzip
1.6G	./tarpit/sql2_backuplogs.gzip
1.6G	./tarpit/sql1_backuplogs.gzip
24G	./tarpit
4.0K	./windows
5.9G	./ext4.img
30G	.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now applications like du have a harder time detecting hardlinks, making it more likely that attackrs won’t notice. However, doing this now means that we are technially running a “corrupt” filesystem, and fsck will alert of this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ironmoon /mnt # fsck /dev/loop0 -fn
fsck from util-linux 2.32
e2fsck 1.44.2 (14-May-2018)
Warning!  /dev/loop0 is mounted.
Warning: skipping journal recovery because doing a read-only filesystem check.
Pass 1: Checking inodes, blocks, and sizes
Inode 129794 is in use, but has dtime set.  Fix? no

Pass 2: Checking directory structure
Pass 3: Checking directory connectivity
Pass 4: Checking reference counts
Inode 12 ref count is 1, should be 4.  Fix? no

Inode 13 ref count is 1, should be 4.  Fix? no

Unattached zero-length inode 129794.  Clear? no

Unattached inode 129794
Connect to /lost+found? no

Pass 5: Checking group summary information
Inode bitmap differences:  +129794
Fix? no


/dev/loop0: ********** WARNING: Filesystem still has errors **********

/dev/loop0: 12/640848 files (0.0% non-contiguous), 468678/2560000 blocks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What’s more if you or anyone else deletes any of the files, the inode link count will decrease to 0 causing the inode to be considered unallocated and causing all kinds of errors. You won’t be able to fix it without manually setting the link count either, as running fsck will propt for the files to be deleted.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ironmoon /mnt/tarpit # rm sql3_backup.gzip sql3_backuplogs.gzip
root@ironmoon /mnt/tarpit # cd .. &amp;amp;&amp;amp; umount tarpit &amp;amp;&amp;amp; mount ext4.img tarpit &amp;amp;&amp;amp; cd tarpit
root@ironmoon /mnt/tarpit # ls                                                               :(
ls: cannot access 'sql2_backup.gzip': Structure needs cleaning
ls: cannot access 'sql1_backup.gzip': Structure needs cleaning
ls: cannot access 'sql2_backuplogs.gzip': Structure needs cleaning
ls: cannot access 'sql1_backuplogs.gzip': Structure needs cleaning
lost+found  sql1_backup.gzip      sql2_backup.gzip
personal    sql1_backuplogs.gzip  sql2_backuplogs.gzip
root@ironmoon /mnt # fsck /dev/loop0 -fn                                                       :(
fsck from util-linux 2.32
e2fsck 1.44.2 (14-May-2018)
Warning!  /dev/loop0 is mounted.
Warning: skipping journal recovery because doing a read-only filesystem check.
Pass 1: Checking inodes, blocks, and sizes
Pass 2: Checking directory structure
Entry 'sql1_backup.gzip' in / (2) has deleted/unused inode 12.  Clear? no

Entry 'sql1_backuplogs.gzip' in / (2) has deleted/unused inode 13.  Clear? no

Entry 'sql2_backup.gzip' in / (2) has deleted/unused inode 12.  Clear? no

Entry 'sql2_backuplogs.gzip' in / (2) has deleted/unused inode 13.  Clear? no

Entry 'dropbox_backup2018.gzip' in /personal (389377) has deleted/unused inode 12.  Clear? no

Entry 'dropbox_backup2017.gzip' in /personal (389377) has deleted/unused inode 13.  Clear? no
    
Pass 3: Checking directory connectivity
Pass 4: Checking reference counts
Pass 5: Checking group summary information

/dev/loop0: ********** WARNING: Filesystem still has errors **********

/dev/loop0: 12/640848 files (0.0% non-contiguous), 65845/2560000 blocks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In conclusion, you can create these file based tarpits to slow down attackers, but there isn’t a “good” way to prevent an attacker from being able to work out what’s going on with standard tools if they are paying attention. However, the cost of just having some files on the filesystem is often minimal, and it may very well slow down an attacker.&lt;/p&gt;

&lt;h1 id=&quot;infinitly-recurring-directories-with-hardlinks&quot;&gt;Infinitly recurring directories with Hardlinks&lt;/h1&gt;

&lt;p&gt;What if we could have infinite dummy data through a recursive hardlink on a directoy! An attacker would spend forever copying the data off, that will slow them down significantly. Let’s try to make it work.&lt;/p&gt;

&lt;p&gt;We start by setting up a new filesystem as we broke the last one&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /mnt
umount tarpit
dd if=/dev/zero of=ext4.img bs=1M count=10000
mkfs.ext4 ext4.img
mkdir tarpit
mount ext4.img tarpit
cd tarpit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And fill it with a few files and folders to play with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir accounts
dd if=/dev/urandom of=accounts/sql1_backup.gzip bs=650MB count=1 iflag=fullblock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The plan here is to have a folder in accounts link back on itself by creating a hard link. You can’t hard link back to yourself in the same directory, but if you have a directory inbetween you can achieve the same thing.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ironmoon /mnt/tarpit # mkdir accounts/2018/
root@ironmoon /mnt/tarpit # cp -lr accounts accounts/2018/records
cp: cannot copy a directory, 'accounts', into itself, 'accounts/2018/records'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The cp command knows what we are doing, and won’t let us setup a hardlink. But what if we created the link anyway? Filesystem debug tools to the rescue!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ironmoon /mnt/tarpit # debugfs -wR 'link accounts accounts/2018/records' ../ext4.img
root@ironmoon /mnt/tarpit # cd .. &amp;amp;&amp;amp; umount tarpit &amp;amp;&amp;amp; mount ext4.img tarpit &amp;amp;&amp;amp; cd tarpit
root@ironmoon /mnt/tarpit # ls accounts                                                        :(
ls: cannot access 'accounts/accounts': Structure needs cleaning
2018  accounts  sql1_backup.gzip
1 root@ironmoon /mnt/tarpit # tree accounts                                                      :(
accounts
├── 2018
└── sql1_backup.gzip
root@ironmoon /mnt/tarpit # cp -r accounts ../test 
cp: cannot stat 'accounts/accounts': Structure needs cleaning
cp: cannot stat 'accounts/2018/records': Too many levels of symbolic links
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In conculsion it works, but the tree command sees through the disguise and if the attacker tried to use cp to copy the files off, then cp would also see though the disguise. This causes a lot of erors too, and requires you to “corrupt” your file system. Frustrating but not practical.&lt;/p&gt;

&lt;h1 id=&quot;infinitly-recurring-directories-with-softlinks&quot;&gt;Infinitly recurring directories with Softlinks&lt;/h1&gt;

&lt;p&gt;Ok so hardlink recursive directories don’t work, what about softlinks? Many software suites undersand softlinks and correctly honor them.&lt;/p&gt;

&lt;p&gt;We start by setting up a new filesystem as we broke the last one&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /mnt
umount tarpit
dd if=/dev/zero of=ext4.img bs=1M count=10000
mkfs.ext4 ext4.img
mkdir tarpit
mount ext4.img tarpit
cd tarpit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And fill it with a few files and folders to play with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir accounts
dd if=/dev/urandom of=accounts/sql1_backup.gzip bs=650MB count=1 iflag=fullblock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this time we use softlinks, with absoloute paths&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ironmoon /mnt/tarpit # ln -s /mnt/tarpit/ accounts/services/2018
root@ironmoon /mnt/tarpit # tree
.
└── accounts
    ├── services
    │   └── 2018 -&amp;gt; /mnt/tarpit/
    └── sql1_backup.gzip

3 directories, 1 file
root@ironmoon /mnt/tarpit # du -hal
620M	./accounts/sql1_backup.gzip
0	./accounts/services/2018
4.0K	./accounts/services
620M	./accounts
620M	.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The problem here is all our tools know what’s going on here, they expect that a symbolic link loop may exist. The cp command knows that symbolic links exist and won’t attempt to even copy their contents, but will just attempt to copy the symbolic link file.&lt;/p&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;Filesystems are working like they should, they resist the ability for you to create any kind of loop condition, and it requires you to manually edit the filesystem to even fool them. While they may confuse any attacker that does gain access to your system, the only trick here that I would recomend is normal hardlink of dummy files.&lt;/p&gt;

&lt;p&gt;Combining these honeyfiles and legal hardlinks makes for a legitimate strategy to catch and slow attackers down. And when its free with no software required to be installed, why not try it out?&lt;/p&gt;
</description>
            <pubDate>Sun, 20 May 2018 13:00:00 +1000</pubDate>
        </item>
        
        <item>
            <title>File Based Honeypots with Auditd</title>
            <link>/2018/05/19/File-Based-Honeypots-with-Auditd.html</link>
            <guid isPermaLink="true">/2018/05/19/File-Based-Honeypots-with-Auditd.html</guid>
            <description>&lt;p&gt;Honeypots are all the rage with them being a fantastic tool to quickly identify malicious activity from usual system activity. There are many kinds of honeypots, including honeypot ports (honeyports) and even entire honey networks (honeynet), however the one I want to talk about is honeypot files (honeyfiles).&lt;/p&gt;

&lt;p&gt;Honeyfiles are files that can be placed on a filesystem that are designed to look entising, and when accessed trigger an auditd rule to let you know. An example could be putting a file called “passwords.txt” on the filesystem. Any attacker that gains access to the system is likely to want to know what that file contains.&lt;/p&gt;

&lt;p&gt;We can start by creating some random files to put around the filesystem&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dd if=/dev/urandom of=/SQLBackup-2017-11-24.gzip bs=120334KB count=1 iflag=fullblock
dd if=/dev/urandom of=/root/passwords_encrypted.txt bs=334KB count=1 iflag=fullblock
dd if=/dev/urandom of=/opt/apache-db-preupgrade.db bs=162334KB count=1 iflag=fullblock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The content of the files don’t matter, even touching the files will be enough to trigger an alert. However, providing some legitimate but useless data may servce to wase the time of the attacker, giving you more time to repond.&lt;/p&gt;

&lt;p&gt;Next we need to ensure that auditd is installed and running, on CentOS this would be done through the following commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install audit
systemctl enable auditd
systemctl start auditd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we create our custom rule files in auditd&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ironmoon ~ # vim /etc/audit/rules.d/70-honeyfiles.rules
-w /SQLBackup-2017-11-24.gzip -p wra -k HONEYFILE_ACCESSS
-w /root/passwords_encrypted.txt -p wra -k HONEYFILE_ACCESSS
-w /opt/apache-db-preupgrade.db -p wra -k HONEYFILE_ACCESSS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In these rules “-w” means file followed by the filepath, and “-p wra” means trigger on file read, write, or attribute change. With the rule created we just need to make sure its imported and auditd reloads the configuration.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ironmoon ~ # augenrules
root@ironmoon ~ # pkill -HUP -P 1 auditd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now when we even access the files we will get a triggered alert&lt;/p&gt;

&lt;p&gt;root@ironmoon / # aureport -f&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;File Report
===============================================
# date time file syscall success exe auid event
===============================================
1. 19/05/18 23:32:35 passwords_encrypted.txt 191 no /usr/bin/ls 1000 337
2. 19/05/18 23:32:41 passwords_encrypted.txt 192 yes /usr/bin/stat 1000 340
3. 19/05/18 23:36:17 passwords_encrypted.txt 191 no /usr/bin/ls 1000 341
4. 19/05/18 23:36:21 SQLBackup-2017-11-24.gzip 191 no /usr/bin/ls 1000 342
5. 19/05/18 23:38:26 SQLBackup-2017-11-24.gzip 191 no /usr/bin/ls 1000 343
6. 19/05/18 23:38:26 SQLBackup-2017-11-24.gzip 192 yes /usr/bin/ls 1000 344
7. 19/05/18 23:38:26 SQLBackup-2017-11-24.gzip 191 no /usr/bin/ls 1000 345
8. 19/05/18 23:38:26 SQLBackup-2017-11-24.gzip 191 no /usr/bin/ls 1000 346
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This allows us to see all the access to those files, but you may notice that you will recieve information about ALL access, including simply grabbing info about the file from the ls command, as a result some filtering is required.&lt;/p&gt;

&lt;p&gt;Now when its collected at a network loging server you can set up alerts whenever any access to the file is attempted. If we wanted the auditd logs to be forwared to syslog to be included in system logs, you can do that with the following setting&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ironmoon ~ # vim /etc/audisp/plugins.d/syslog.conf
active = yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
            <pubDate>Sat, 19 May 2018 09:00:00 +1000</pubDate>
        </item>
        
        <item>
            <title>A tale of 102 RFID cards</title>
            <link>/2013/06/24/A_Tale_of_102_RFID_Cards.html</link>
            <guid isPermaLink="true">/2013/06/24/A_Tale_of_102_RFID_Cards.html</guid>
            <description>&lt;p&gt;About 6 months ago i bought 102 EM4100 protocol RFID cards (From &lt;a href=&quot;http://tinyurl.com/axrct2r&quot;&gt;here&lt;/a&gt;) and a compatible RFID reader &lt;a href=&quot;https://www.sparkfun.com/products/8419&quot;&gt;https://www.sparkfun.com/products/8419&lt;/a&gt;. This was to investigate how it was that these common RFID cards work.&lt;/p&gt;

&lt;p&gt;EM4100 protocol cards, like the ones I bought, are factory programed with a 8bit Customer or Version ID, 32bit unique code and some parity information. Once the card powers up from being within proximity of a reader it starts blasting out this code encoded in Manchester Encoding and looks something like the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2013-06-24/capture.png&quot; alt=&quot;Data capture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The theoretical minimum transmission speed possible is about 28ms, however many readers require you to transmit this code twice for it to be accepted.&lt;/p&gt;

&lt;p&gt;This gives a total possible number of unique cards of 4,294,967,296 (2^32) or 1,099,511,627,776 (2^40) depending on if unique Customer or Version IDs are used. At the theoretical minimum transmission speed of 28ms this gives the worst case brute force time of 3.8 years or 975.5 years if also using the Customer or Version ID’s bits.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Lets assume you don’t know the Customer or Version ID a reader accepts and you are attacking a door with 10,000 valid cards, at 0.028 seconds per card it would take 35.63 days to guess a valid card. Knowledge of the Customer or Version ID takes this time down to 3.341 hours.&lt;/p&gt;

&lt;p&gt;A more realistic example of 200 valid cards would take 6.959 days or 4.87895 years without knowledge of the Customer or Version ID.&lt;/p&gt;

&lt;p&gt;One major security feature is the relatively slow reading time, you will have a hard time finding a commercial reader that can read cards back-to-back at 28 milliseconds each. Generally you get a reading time between 0.1 and 1 seconds.&lt;/p&gt;

&lt;p&gt;However, this security is relying on the numbers being uniquely random. If all cards use the same Customer or Version ID and an attacker has knowledge of this Customer or Version ID they have reduced the system entropy by 1,095,216,660,480 potential cards, a 99.61% reduction.&lt;/p&gt;

&lt;p&gt;So with the entire security of the system relying on the strength of the random number generator used to program these cards, lets have a look at two separate packs of 51 cards i bought on eBay from China.&lt;/p&gt;

&lt;p&gt;99 of the cards had the same Customer or Version ID of 0×06 with the remaining 3 cards having 0×07.&lt;/p&gt;

&lt;p&gt;Here is a graph showing the 99 cards in the order they were shipped in with their Customer or Version ID omitted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2013-06-24/graph.png&quot; alt=&quot;Data capture&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Min:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;25773269859&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Max:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;25785845002&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Range:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;12575143&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Right off the bat you can tell that there is a problem here, the vast majority of cards are a proximity of others. The problem is even worse when the cards have been clustered.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Cluster&lt;/th&gt;
      &lt;th&gt;%&lt;/th&gt;
      &lt;th&gt;Mean&lt;/th&gt;
      &lt;th&gt;STD Deviation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;42.42%&lt;/td&gt;
      &lt;td&gt;25775067346.5&lt;/td&gt;
      &lt;td&gt;14166.12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;39.39%&lt;/td&gt;
      &lt;td&gt;25774974455&lt;/td&gt;
      &lt;td&gt;11566.25&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;10.10%&lt;/td&gt;
      &lt;td&gt;25785758931.5&lt;/td&gt;
      &lt;td&gt;6361.64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;4.04%&lt;/td&gt;
      &lt;td&gt;25785473311.5&lt;/td&gt;
      &lt;td&gt;9401.02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1.01%&lt;/td&gt;
      &lt;td&gt;25785845002&lt;/td&gt;
      &lt;td&gt;N/A One card only&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;1.01%&lt;/td&gt;
      &lt;td&gt;25785343243&lt;/td&gt;
      &lt;td&gt;N/A One card only&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;1.01%&lt;/td&gt;
      &lt;td&gt;25773269859&lt;/td&gt;
      &lt;td&gt;N/A One card only&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;1.01%&lt;/td&gt;
      &lt;td&gt;25775166994&lt;/td&gt;
      &lt;td&gt;N/A One card only&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Even with a more realistic reading time of 0.2 seconds per card you have a 40.4% chance of guessing a valid RFID card within 5666.448 seconds or 95 minutes based on 1 card within cluster 1 alone. Including cluster 2 you have a 78.08% chance of guessing a valid RFID card in under 10292.948 seconds or 172 minutes.&lt;/p&gt;

&lt;p&gt;This pattern persisted through two stacks of cards (individually packaged I might add) so if you know the supplier used you could have a good chance of guessing a valid card. The big “security by X” logo stuck on the door can be a big hint here. The clusters appear pretty quickly so buying even 10 cards from a company could be enough to start an attack with good chances.&lt;/p&gt;

&lt;p&gt;Another scenario is if you obtain a lost invalid or partially valid (eg. low security areas only) card, you can use that to stage an attack by guessing numbers around it with potentially some success.&lt;/p&gt;

&lt;p&gt;However, the addition of even a 2 digit pincode along with the RFID card makes these attacks infeasible on increased input time alone.&lt;/p&gt;

&lt;p&gt;Another mitigation strategy is to increase the processing time of cards into the range of seconds. This has the added benefit of not only decreasing the feasibility of such an attack but also not requiring users to change their behavior. This however does not protect from lost or stolen cards like an additional pincode.&lt;/p&gt;
</description>
            <pubDate>Mon, 24 Jun 2013 19:00:00 +1000</pubDate>
        </item>
        
        <item>
            <title>Duplicating house keys using a 3d printer</title>
            <link>/2013/03/05/Duplicating_House_Keys_Using_a_3D_Printer.html</link>
            <guid isPermaLink="true">/2013/03/05/Duplicating_House_Keys_Using_a_3D_Printer.html</guid>
            <description>&lt;p&gt;I had the idea to duplicate some house keys on my Makerbot Thing-O-Matic 3D printer after seeing a post about in on thingiverse &lt;a href=&quot;http://www.thingiverse.com/thing:8925&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So after messing around with the script provided by usr nrp for a while I couldn’t really get it to work so i decided to just make a script from scratch to improve my SCAD skills. (SCAD is like a programing language for creating parametric 3d CAD objects)&lt;/p&gt;

&lt;p&gt;After a few hours with a key and a pair of digital calipers I got an object that fit in the lock but has not been cut (think of a blank key).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2013-03-05/key.jpg&quot; alt=&quot;Key Blank Openscad&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2013-03-05/Blank-comparison-2.jpg&quot; alt=&quot;Blank comparison - front&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2013-03-05/Blank-comparison.jpg&quot; alt=&quot;Blank comparison - Top&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From there i started working on the cuts. On this particular key the cut depth appeared to be a multiple of 0.58mm with spacing from every cut being equal to 4.12mm. Some of these measurements where gained by using &lt;a href=&quot;http://web.archive.org/web/20050217020917fw_/http://dlaco.com/spacing/tips.htm&quot;&gt;this cheat sheet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This step was mostly trial and error, i made modifications halfway through to reduce printing time and many modifications to the multipliers, cut depths, ect…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2013-03-05/IMG_0255.jpg&quot; alt=&quot;All keys&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Eventually came up with some results as shown above. After the measurements where perfected, the keys started to work. The keys are brittle but most locks don’t have much resistance turning the key when the key fits. The use of a torsion bar from a lock pick set to turn the lock could be used on rusted or heavy locks.&lt;/p&gt;

&lt;p&gt;Every key has a bit-code, this is a set of numbers that identify the key’s ID number. Any similar style key with the same bit-code will work in the same lock. I was able to guess the bit-code but this photo will show what im doing. We are measuring the dips and not the ridges, the ridges exist to ensure the tumbler pins rest in place.&lt;/p&gt;

&lt;p&gt;Note: In my script the bit-code goes from base to tip, other scripts or even official documentation may be different.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2013-03-05/BitCode.jpg&quot; alt=&quot;BitCode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The keys only have 7 ridges based on documentation linked above. This gives a total key-space of 7^7 or 823,543 different combinations.&lt;/p&gt;

&lt;p&gt;With such a small combination of ridges its not hard to see why lock-picking isn’t difficult. Not only that but the keys are pretty easy to duplicate based off visual identification, the SNEAKEY system deminstrated this as shown &lt;a href=&quot;http://www.schneier.com/blog/archives/2011../duplicating_phy.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2013-03-05/OpeSCAD-Render.png&quot; alt=&quot;OpeSCAD Render&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2013-03-05/Cut-comparison.jpg&quot; alt=&quot;Cut comparison&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2013-03-05/CutLock.jpg&quot; alt=&quot;Cut - Lock&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In total i did this entire project in just a few hours, its scary how simple many of these keys are in design. I would estimate that i could duplicate high security keys in a similar time if my printer has the accuracy. Sure some of these high security keys are very difficult to pick but if all it takes is visual inspection of a key to breach a lock then this presents a problem for people who wish to keep things behind locked doors.&lt;/p&gt;
</description>
            <pubDate>Tue, 05 Mar 2013 00:00:00 +1100</pubDate>
        </item>
        
        <item>
            <title>Fixing a broken Samsung 2233 LCD</title>
            <link>/2012/11/05/Fixing_a_Broken_Samsung_2233_LCD.html</link>
            <guid isPermaLink="true">/2012/11/05/Fixing_a_Broken_Samsung_2233_LCD.html</guid>
            <description>&lt;p&gt;I bought 3 Samsung 2233 120hz LCD’s on the cheap before they were being discontinued over a year ago. They are great screens and the 120hz refresh rate is just very nice on the eyes.&lt;/p&gt;

&lt;p&gt;However one of them broke! Devastated i immediately took the thing apart. It would turn on for only a second, the back-light would flash and turn off with the LCD still functioning, a broken backlight. Having encounterd the problem many times i immediately thought it was a leaky capacitor. Easy enough thing to fix, replace a few broken capacitors with some from jaycar. However, all the capacitors where 100% fine.&lt;/p&gt;

&lt;p&gt;I checked the primary rails of 13v, 5v, 3.3v, and they were all fine when the screen was on. So its not the capacitors or the rails. So I checked the Backlight control lines that lead into the power supply for spikes or changes. Everything still operating as expected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2012-11-05/Backlight.jpg&quot; alt=&quot;Backlight&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I followed where the control lines lead on the PCB and was lead to a Control chip. After some probing, I noticed one of its feed back lines was out of the expected range according to the datasheet of 1-2v. Its lines connected to a set of transistors that in turn connected to the LCD inverter output.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2012-11-05/backlight_outline.jpg&quot; alt=&quot;Backlight outline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This meant that either the MOSFET was blown or the transformer was broken. Some probing later and it appeared as if the MOSFET was working fine. I then de-soldered the transformer to measure its coil resistance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2012-11-05/coil_resistance.jpg&quot; alt=&quot;Coil resistance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The identical secondary coils where out of sync by a massive 40%! 881 and 1233 ohms respectively. I have zero idea how a passive component could fail like this but it has.&lt;/p&gt;

&lt;p&gt;I ordered a replacement off ebay &lt;a href=&quot;http://www.ebay.com/itm/TM-0915-Inverter-Transformer-for-SAMSUNG-LCD-/150935782915?pt=US_Monitor_Replacement_Parts&amp;amp;hash=item2324794603&quot;&gt;here&lt;/a&gt; and the screen was then fine! The coil resistance was 890 ohms on both secondary coils The feedback loop was then stable at 1.5V. Exactly between the expected range of 1-2V&lt;/p&gt;
</description>
            <pubDate>Mon, 05 Nov 2012 00:00:00 +1100</pubDate>
        </item>
        
        <item>
            <title>Motorbike Clock Part 2</title>
            <link>/2012/09/05/Motorbike_Clock_Part_2.html</link>
            <guid isPermaLink="true">/2012/09/05/Motorbike_Clock_Part_2.html</guid>
            <description>&lt;p&gt;With my motorbike clock built and programmed i needed a way to mount it to my motorcycle. So i designed a container in blender and printed it on my 3D printer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2012-09-05/Motorbike-Clock-Render.jpg&quot; alt=&quot;Motorbike clock render&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2012-09-05/IMG_0028.jpg&quot; alt=&quot;3D printer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2012-09-05/IMG_0031.jpg&quot; alt=&quot;Finished Part&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Turned out almost perfect! A few warping problems and a few measurement changes ill need to make but that’s the beauty of 3D Printing!&lt;/p&gt;

</description>
            <pubDate>Wed, 05 Sep 2012 00:00:00 +1000</pubDate>
        </item>
        
        <item>
            <title>Motorbike Clock Part 1</title>
            <link>/2012/09/02/Motorbike_Clock_Part_1.html</link>
            <guid isPermaLink="true">/2012/09/02/Motorbike_Clock_Part_1.html</guid>
            <description>&lt;p&gt;I got sick of not knowing the time when i ride my motorbike. So i designed a clock to tell the time for me!&lt;/p&gt;

&lt;p&gt;Using a &lt;a href=&quot;https://www.sparkfun.com/products/9482&quot;&gt;7segment Display from SparkFun&lt;/a&gt; a Real Time Clock (I used the ultra accurate DS3232) and a ATMEGA328p.&lt;/p&gt;

&lt;p&gt;For the sake of saving space i built it in two layers. This is the first time ive used a SMPS in a design. I used the 5v version of the LM2594 and it was surprisingly simple to use. It worked pretty well. I had originally planned to control the brightness of the display using a LDR but i never implemented this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2012-09-02/MotorbikeClockv01sch.png&quot; alt=&quot;sch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2012-09-02/MotorbikeClockv01brd.png&quot; alt=&quot;brd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After getting the boards made with another order they came out pretty nice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2012-09-02/IMG_0022.jpg&quot; alt=&quot;brd1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2012-09-02/IMG_0024.jpg&quot; alt=&quot;brd2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Covered the 12mm battery in kapton tape to keep it in its holder and insulate it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2012-09-02/IMG_0025.jpg&quot; alt=&quot;brd1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2012-09-02/IMG_0027.jpg&quot; alt=&quot;brd2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Programing it was a sinch! Using a mixture of C, pre existing arduino libs and processing to upload the time. The clock works in 12 hour time and the seconds are shown in binary on the decimal places on the display with 4 second accuracy (one bit equals 4 seconds).&lt;/p&gt;
</description>
            <pubDate>Sun, 02 Sep 2012 00:00:00 +1000</pubDate>
        </item>
        
        <item>
            <title>Block Cipher Modes of Operation</title>
            <link>/2012/08/29/Block_Cipher_Modes_of_Operation.html</link>
            <guid isPermaLink="true">/2012/08/29/Block_Cipher_Modes_of_Operation.html</guid>
            <description>&lt;p&gt;There is more to encryption than just a fancy cipher. A badly implemented encryption method can be just as bad as an insecure cipher. One of the factors when choosing how to encrypt a file is the mode of operation.&lt;/p&gt;

&lt;p&gt;Say you are working on a brand-new top secret tank design. You have finished the blueprints and now you need to send it halfway across the country to be built. Due to the nature of this special tank you need to ensure that it is kept a secret so you decide to encrypt the plans with AES.
You pre-shared a key the last time you where at the manufacturing facility so the key is secure but you use vanilla AES-128-ECB (Electronic codebook) encryption, where every block of the file is simply encrypted using the key.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ openssl aes-128-ecb -in M1A1.BMP -out M1A1-ecb.BMP
enter aes-128-cbc encryption password: ****
Verifying – enter aes-128-cbc encryption password: ****
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, during transport a 3rd party was able to intercept the files. They were not able to decrypt the file as they did not know the encryption key, but they were able to copy the BMP header from another similar sized file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ dd if=M1A1.BMP of=M1A1-ecb.BMP bs=1 count=54 conv=notrunc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When they opened the file in a image program, they were able to get a rough outline of the image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2012-08-29/Mode-of-operations-comparison.jpg&quot; alt=&quot;Cipher Modes&quot; /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;There is not enough information to independently construct the tank, but they can see what is being worked on. This happens due to problems in how repetitive data is encrypted and is a problem with all major encryption standards. When you encrypt 2 identical blocks of data, you can expect it to have the same output. Images can have large blocks of color that are identical. Because of this, when rendered in an image program you can get an outline like above.
Because of this there was a need for new ways to encrypt data so that it appears as completely unreadable data such as in the AES128 CBC example above. One of the most popular ways of doing this is by using Cipher-block chaining (CBC). This is the default mode for encrypted ZIP files and by far the most common of all modes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2012-08-29/Cbc_encryption.png&quot; alt=&quot;Cipher Modes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here there is an addition of a Initialization Vector (IV) and the input is different for every block. The key is a product of the previous data so similar plain-text blocks do not equal the same encrypted blocks. The Initialization Vector (IV) is added as to guarantee uniqueness for the first and successive blocks. The Initialization Vector (IV) is considered public information and is normally included in the beginning of the file. It is however important to never use the same Initialization Vector (IV)/password pair as doing so may give away information about the first block of data. Generally the Initialization Vector (IV) is randomly generated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2012-08-29/Ctr_encryption.png&quot; alt=&quot;Cipher Modes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another method of introducing this random propagation to the cypher-text is by transforming the block cypher into a stream cypher. Using it to create a key-stream by encrypting a increasing counter using a secret key and XOR’ing that with the plaintext. This has the added benefit of not requiring padding of data as a precise length of key-stream can be created. This is called Counter (CTR) mode. Some people feel that having such a systematic input is an unnecessary risk so the addition of a Initialization Vector (IV) added in some way to the counter recommended. However, the Security of this mode is largely dependent on the security of the underlying block cipher.&lt;/p&gt;

&lt;p&gt;This mode has the benefit of being able to encrypt and decrypt any block using parallel computations making it very suitable for disk level encryption. Random access and even pre-processing making this one of the fastest common modes and also the simplest to implement.&lt;/p&gt;

&lt;p&gt;One of the problems, especially with CTR and CBC is that while you have confidentiality you do not have integrity or authenticity. For this reason modes that provided confidentiality, integrity and authenticity where developed and are referred to as Authenticated Encryption Modes.&lt;/p&gt;

&lt;p&gt;One such mode is Counter with CBC-MAC (CCM). It has the requirement of 128-bit blocks such as AES. It uses a Counter (CTR) Mode for confidentiality and CBC-MAC for integrity and authenticity. While these steps are normally considered independent there are implementations that are not secure so this standard defines a good interleaving of data before combination with the key-stream. This way any change to the data will result in a large and unpredictable change in the MAC, showing proof if the data has been tampered. This however comes at the cost of data expansion. The MAC takes up space at the cost of improved security.&lt;/p&gt;

&lt;p&gt;I won’t go into the detail of how this mode works as it is very complex but I will mention that its major disadvantage is that it is very slow and has no support for parallel computation. For this reason Galois/Counter Mode (GCM) is preferred for high speed communication. Its major speed improvement is the use of a much faster hash function, but uses the CTR (counter) mode for confidentiality like CCM.&lt;/p&gt;

&lt;p&gt;Some modes are purpose built or chosen to serve certain functions. Counter (CTR) for example is very useful for fast, random-access and parallel computation and because of this it is very useful for hard drive storage. Hard drives are already split up into blocks known as sectors so you could easily use the sector number as the counter and achieve hard drive encryption with very little modification of a file-system driver.&lt;/p&gt;

&lt;p&gt;However, this would raise various other problems unique to hard disk drives such as differences between logical and physical sectors so the XEX-based tweaked-codebook mode with cipher-text stealing (XTS) was created with the purpose of securely encrypting block based storage devices. It does not provide full integrity and authenticity protection but does provide some limited protection from malicious manipulation of encrypted data. This limitation is due to a design decision to avoid data expansion caused by adding integrity and authenticity.&lt;/p&gt;

&lt;p&gt;There are various modes of operation with block based cyphers, the exact mode that should be used depends highly on the work being done. There are many other modes not mentioned here but have similar purposes to the modes already mentioned above. In computer security the weakest link is often enough to break the rest of the system. Plain encryption alone is not enough to secure your data.&lt;/p&gt;
</description>
            <pubDate>Wed, 29 Aug 2012 00:00:00 +1000</pubDate>
        </item>
        
    </channel>
</rss>